/*
 * Copyright (c) 2011 Lockheed Martin Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.eurekastreams.server.action.execution;

import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.eurekastreams.commons.actions.InlineExecutionStrategyExecutor;
import org.eurekastreams.commons.actions.TaskHandlerExecutionStrategy;
import org.eurekastreams.commons.actions.context.ActionContext;
import org.eurekastreams.commons.actions.context.TaskHandlerActionContext;
import org.eurekastreams.server.action.request.CreatePersonRequest;
import org.eurekastreams.server.domain.Person;
import org.eurekastreams.server.service.actions.strategies.PersonLookupStrategy;
import org.springframework.util.Assert;

/**
 * Creates person in DB from LDAP lookup info.
 *
 */
public class CreatePersonFromCasExecution implements TaskHandlerExecutionStrategy<ActionContext>
{

	/**
     * Logger.
     */
    private static Log log = LogFactory.getLog(CreatePersonFromCasExecution.class);

	
    /**
     * Create person strategy.
     */
    private final TaskHandlerExecutionStrategy<ActionContext> createPersonStrategy;

    /**
     * Constructor.
     *
     * @param inLdapPersonMapper
     *            {@link PersonLookupStrategy}.
     * @param inCreatePersonStrategy
     *            Create person strategy.
     */
    public CreatePersonFromCasExecution(
            final TaskHandlerExecutionStrategy<ActionContext> inCreatePersonStrategy)
    {
        createPersonStrategy = inCreatePersonStrategy;
        Assert.notNull(createPersonStrategy);
    }

    /**
     * Creates person in DB from CAS info.
     *
     * @param inActionContext
     *            context.
     * @return Person created.
     * 
     * @author yardmap-cm325 - compare below with original, and original from UserDetailService and get rid of cruft
     */
    //@Override
    public Person execute(final TaskHandlerActionContext<ActionContext> inActionContext)
    {
    	log.info("CreatePersonFromCas is executing, setting some properties and returning new person");
        Map<String, String> casAssertions = (Map<String,String>) inActionContext.getActionContext().getParams();
        Assert.notNull(casAssertions);

        //List<Person> results = ldapPersonMapper.findPeople(userId, 1);
        //create person here instead from params coming from actionContext
        String username = casAssertions.get("username");
        Person person = new Person(username, username, " ", " ",casAssertions.get("preferredName"));
        person.setEmail(casAssertions.get("email"));
        
        //Note: dummy open social ids are autogenerated see #....
        //person.setOpenSocialId("8c628ef3-8f07-4015-9017-2588b64b67d9"); //TODO TODO TODO 
        
        //TODO we might be able to use the additional properties route, but it means storing
        // 		java serialized objects in db, which may be a pain to update directly through sql (or use)
        /*HashMap<String,String> additionalProperties = new HashMap<String,String>();
        additionalProperties.put("userId", casAssertions.get("user_id"));
        person.setAdditionalProperties(additionalProperties);*/
        
        // short circut if no results from ldap.
        /*if (results == null || results.size() == 0)
        {
            return null;
        }*/ //TEST IF WE SOME TRY BLOCK OR SOMETHING

        //we should instead short circuit if there is no username, since that means we're at a cas error
        if(username == null || username.length() < 1){
        	log.error("CreatePersonFromCasExecution as null username, meaning no user creation, everything ends here, and CAS is probably not returning the correct SAML");
        	return null;
        }
        
        // get Person and set locked before creation.
        // @yardmap-cm325 - we want accounts to not be locked, and not require unlocking, so make them unlocked by default
        //Person person = results.get(0);
        person.setAccountLocked(false);

        //create person without sending email (CreatePersonRequest with false)
        //createPersonStrategy is CreatePersonExecution
        Person newPerson = (Person) new InlineExecutionStrategyExecutor().execute(createPersonStrategy,
                new CreatePersonRequest(person, false), inActionContext);
        
        log.info("CreatePersonFromCas is successfully returning a new Person");
        return newPerson;
    }

}

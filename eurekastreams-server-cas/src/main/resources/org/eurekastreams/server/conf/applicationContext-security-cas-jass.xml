<?xml version="1.0" encoding="UTF-8"?>

<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
     http://www.springframework.org/schema/security 
     http://www.springframework.org/schema/security/spring-security-2.0.4.xsd">
                
                
    <http entry-point-ref="casProcessingFilterEntryPoint">
    	<!-- block direct access to targets of rewrites -->
        <intercept-url pattern="/resources/api/**" access="ROLE_DENY_ALL"/>
        <intercept-url pattern="/newresources/**" access="ROLE_DENY_ALL"/>
        <intercept-url pattern="/oldresources/**" access="ROLE_DENY_ALL"/>

        <!-- Commented out to use "authFilter" below with manual configuration for exception mapping -->
        <!-- <form-login default-target-url="/login_success.html" always-use-default-target="true"/> -->         
        <!-- TODO: Most of these anonymous urls can be removed once apache is serving content in dev env. -->
        <intercept-url pattern="/index.html" access="ROLE_USER"/>
        <!-- @author yardmap-cm325 added security allowance for the cas failed page -->
        <intercept-url pattern="/casfailed.html" access="ROLE_ANONYMOUS, ROLE_USER" />
        <intercept-url pattern="/login_disabled.html" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/no_credentials.html" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/style/**" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/scripts/**" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/org.eurekastreams.web.Application.nocache.js" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/*.cache.html" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/requestaccess.html" filters="none"/>
        <intercept-url pattern="/favicon.ico" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/gwt-dnd.css" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/" access="ROLE_USER"/>
        <intercept-url pattern="/resources/autocomplete/entities/**" access="ROLE_USER"/>
        <intercept-url pattern="/resources/atom/**" access="ROLE_USER"/>
        <intercept-url pattern="/resources/util/**" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/resources/emailcontact/**" access="ROLE_USER"/>
        <intercept-url pattern="/resources/**" access="ROLE_OAUTH_CLIENT, ROLE_USER"/>
        <intercept-url pattern="/themes/**" access="ROLE_ANONYMOUS, ROLE_USER"/> 
        <intercept-url pattern="/social/**" access="ROLE_ANONYMOUS, ROLE_USER"/>         
        <intercept-url pattern="/gadgets/**" access="ROLE_ANONYMOUS, ROLE_USER"/>        
        <intercept-url pattern="/org/eurekastreams/gadgets/**" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/rpc" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/rpc/**" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/eurekastreams/photos/**" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <!-- @author yardmap-cm325 added role_anonymous because oauth wouldnt work, need to address this, locked down in apache for now -->
	    <intercept-url pattern="/api/0/**" access="ROLE_OAUTH_CLIENT, ROLE_USER, ROLE_ANONYMOUS"/>
	    <!-- in the ym overlay we've added a ymstatic folder, we need to allow anonymous access here, since that overlay doesnt add any additional security filters  -->
	    <intercept-url pattern="/ymstatic/**" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/**" access="ROLE_USER"/>       
        <anonymous />
        <!-- key MUST match key in persistentLoginService -->        
        <remember-me services-ref="persistentLoginService" key="595"/>        
    	<logout logout-success-url="${eureka.server.security.casUrl}/logout?service=http://www.yardmap.org"/>
  </http>       

	<!-- also set up the caching filter -->  
	<beans:bean id="responseCacheHeadersFilter" class="org.eurekastreams.server.cas.ResponseCacheHeadersFilter">
	    <beans:property name="cacheSeconds" value="0" />
	    <beans:property name="useExpiresHeader" value="true" />
	    <beans:property name="useCacheControlHeader" value="true" />
	    <beans:property name="useCacheControlNoStore" value="true" />
	</beans:bean>

  <beans:bean id="serviceProperties" class="org.springframework.security.ui.cas.ServiceProperties">
    <beans:property name="service" value="${eureka.web.baseurl}/j_spring_cas_security_check"/>
    <!-- if true, ticket validation will only succeed if it was issued from a login form, but will fail if it was issued from a single sign-on session.
     Analagous to IS_AUTHENTICATED_FULLY in Spring Security -->
    <beans:property name="sendRenew" value="false"/>
  </beans:bean>
  
  <authentication-manager alias="authenticationManager"/>  
  
	        
	<beans:bean id="casProcessingFilter" class="org.springframework.security.ui.cas.CasProcessingFilter">
	  <custom-filter after="CAS_PROCESSING_FILTER"/>
	  <beans:property name="authenticationManager" ref="authenticationManager"/>
	  <beans:property name="authenticationFailureUrl" value="/casfailed.html"/>
	  <beans:property name="defaultTargetUrl" value="/"/>
	</beans:bean>
		
	<beans:bean id="casProcessingFilterEntryPoint" 
	    class="org.springframework.security.ui.cas.CasProcessingFilterEntryPoint">
	  <beans:property name="loginUrl" value="${eureka.server.security.casUrl}/login"/>
	  <beans:property name="serviceProperties" ref="serviceProperties"/>
	</beans:bean>
  
    <!-- NOTE: A few custom beans here to enable the additional user_id saving from cas response-->
    <beans:bean id="jpaCasPersonMapper" class="org.eurekastreams.server.persistence.CasPersonMapperImpl">
		<beans:constructor-arg ref="queryOptimizer" />
	</beans:bean>
    
    <beans:bean id="createPersonFromCas" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
    	<beans:constructor-arg ref="noValidationStrategy" />
        <beans:constructor-arg ref="noAuthorizationStrategy" />
        <beans:constructor-arg>
            <beans:bean class="org.eurekastreams.server.action.execution.CreatePersonFromCasExecution">
                <beans:constructor-arg ref="createPersonExecution" />
            </beans:bean>
        </beans:constructor-arg>
        <beans:constructor-arg ref="taskHandler" />
        <beans:constructor-arg value="false" />   
    </beans:bean>
  
  <!-- This is a custom extension of the CasAuthenticationProvider, which gives us a hook for custom cas code to run 
       directly after a authenticated ticket has been validated, but before login or username check in es-->
  <!-- <beans:bean id="casAuthenticationProvider" class="org.springframework.security.providers.cas.CasAuthenticationProvider"> -->
  <beans:bean id="casAuthenticationProvider" class="org.eurekastreams.server.service.security.cas.CasAuthenticationProviderWrapper">
    <custom-authentication-provider />
    <beans:property name="userDetailsService" ref="userDetailsService"/>
    <beans:property name="serviceProperties" ref="serviceProperties" />
    <beans:property name="ticketValidator">
      <!-- <beans:bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
        <beans:constructor-arg index="0" value="${eureka.server.security.casUrl}" />
      </beans:bean>-->
      <beans:bean class="org.jasig.cas.client.validation.Saml11TicketValidator">
        <beans:constructor-arg index="0" value="${eureka.server.security.casUrl}" />
        <beans:property name="tolerance" value="100000" /><!-- this was set at 100000, and was changed to 600000 to fix a problem that turned out not to be cas.  -->
      </beans:bean>
    </beans:property> 
    <beans:property name="key" value="an_id_for_this_auth_provider_only"/>
    
    <!-- extended with constructor args -->
    <beans:constructor-arg ref="jpaPersonMapper" />
    <beans:constructor-arg ref="createPersonFromCas" />
    <beans:constructor-arg ref="serviceActionController" />
    <beans:constructor-arg ref="jpaCasPersonMapper" />
  </beans:bean>
  
    
    <beans:bean id="authorityProvider" class="org.eurekastreams.server.service.security.userdetails.AuthorityProviderImpl" />
    
    <beans:bean id="userDetailsService" class="org.eurekastreams.server.service.security.userdetails.UserDetailsServiceImpl">
        <beans:constructor-arg ref="jpaPersonMapper" />
        <beans:constructor-arg ref="persistentLoginRepository" />
        <beans:constructor-arg ref="authorityProvider" />
        <beans:constructor-arg ref="serviceActionController" />
        <beans:constructor-arg ref="createPersonFromLdap" /> <!-- leave es alone here and let it proceed with ldap -->
    	<beans:property name="authenticationType" value="FORM" />
    </beans:bean> 
    
     <beans:bean id="persistentLoginRepository" class="org.eurekastreams.server.service.security.persistentlogin.PersistentLoginRepositoryImpl">
        <beans:constructor-arg ref="jpaPersistentLoginMapper"/>
    </beans:bean>
    
    <beans:bean id="persistentLoginService" class="org.eurekastreams.server.service.security.persistentlogin.PersistentLoginService" >    
        <beans:constructor-arg value="595" />
        <beans:constructor-arg>     
            <beans:ref bean="userDetailsService"/>
        </beans:constructor-arg>
        <beans:constructor-arg>     
            <beans:ref bean="persistentLoginRepository"/>
        </beans:constructor-arg>
        <!-- <beans:property name="alwaysRemember" value="true" /> -->
    </beans:bean>  
    
  
</beans:beans>
